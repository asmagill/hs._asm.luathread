3d2
< #import "../../LuaSkinThread.h"
8,11c7
< // Modules which support luathread have to store refTable in the threadDictionary rather than a static,
< // but we can keep this around, since the macros defined in LuaSkinThread.h will expect it when a module
< // is written to seamlessly work in both environments
< static int refTable = LUA_NOREF;
---
> int refTable;
22c18,19
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
> 
29c26
<     [skin pushLuaRef:LST_getRefTable(skin, USERDATA_TAG, refTable) ref:pw->closureref];
---
>     [skin pushLuaRef:refTable ref:pw->closureref];
34c31
<         lua_rawseti(L, -2, (lua_Integer)(i + 1));
---
>         lua_rawseti(L, -2, i + 1);
47c44
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
59c56
<     watcher_path->closureref = [skin luaRef:LST_getRefTable(skin, USERDATA_TAG, refTable)];
---
>     watcher_path->closureref = [skin luaRef:refTable];
111c108
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
120c117
<     watcher_path->closureref = [skin luaUnref:LST_getRefTable(skin, USERDATA_TAG, refTable) ref:watcher_path->closureref];
---
>     watcher_path->closureref = [skin luaUnref:refTable ref:watcher_path->closureref];
161,167c158,159
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
< 
<     LST_setRefTable(skin, USERDATA_TAG, refTable,
<         [skin registerLibraryWithObject:USERDATA_TAG
<                               functions:pathLib
<                           metaFunctions:meta_gcLib
<                         objectFunctions:path_metalib]) ;
---
>     LuaSkin *skin = [LuaSkin shared];
>     refTable = [skin registerLibraryWithObject:USERDATA_TAG functions:pathLib metaFunctions:meta_gcLib objectFunctions:path_metalib];
