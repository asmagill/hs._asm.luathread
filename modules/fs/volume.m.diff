4d3
< #import "../../LuaSkinThread.h"
32,35c31
< // Modules which support luathread have to store refTable in the threadDictionary rather than a static,
< // but we can keep this around, since the macros defined in LuaSkinThread.h will expect it when a module
< // is written to seamlessly work in both environments
< static int refTable = LUA_NOREF;
---
> int refTable;
52,55c48,49
< @interface LST_VolumeWatcher : NSObject
< @property        VolumeWatcher_t* object;
< @property (weak) NSThread       *myMainThread ;
< 
---
> @interface VolumeWatcher : NSObject
> @property VolumeWatcher_t* object;
59c53
< @implementation LST_VolumeWatcher
---
> @implementation VolumeWatcher
62,63c56
<         _object = object;
<         _myMainThread = [NSThread currentThread] ;
---
>         self.object = object;
70c63
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
73c66
<     [skin pushLuaRef:LST_getRefTable(skin, USERDATA_TAG, refTable) ref:self.object->fn];
---
>     [skin pushLuaRef:refTable ref:self.object->fn];
104,108d96
< - (void)onProperThread:(NSDictionary *)arguments {
<     [self callback:[arguments  objectForKey:@"dict"]
<          withEvent:[[arguments objectForKey:@"event"] unsignedIntValue]];
< }
< 
110,117c98
<     [self performSelector:@selector(onProperThread:)
<                  onThread:_myMainThread
<                withObject:@{
<                               @"dict"  : [notification userInfo] ? [notification userInfo] : [NSNull null],
<                               @"event" : @(didMount)
<                           }
<             waitUntilDone:YES];
< //     [self callback:[notification userInfo] withEvent:didMount];
---
>     [self callback:[notification userInfo] withEvent:didMount];
121,128c102
<     [self performSelector:@selector(onProperThread:)
<                  onThread:_myMainThread
<                withObject:@{
<                               @"dict"  : [notification userInfo] ? [notification userInfo] : [NSNull null],
<                               @"event" : @(didUnmount)
<                           }
<             waitUntilDone:YES];
< //     [self callback:[notification userInfo] withEvent:didUnmount];
---
>     [self callback:[notification userInfo] withEvent:didUnmount];
132,139c106
<     [self performSelector:@selector(onProperThread:)
<                  onThread:_myMainThread
<                withObject:@{
<                               @"dict"  : [notification userInfo] ? [notification userInfo] : [NSNull null],
<                               @"event" : @(willUnmount)
<                           }
<             waitUntilDone:YES];
< //     [self callback:[notification userInfo]  withEvent:willUnmount];
---
>     [self callback:[notification userInfo]  withEvent:willUnmount];
143,150c110
<     [self performSelector:@selector(onProperThread:)
<                  onThread:_myMainThread
<                withObject:@{
<                               @"dict"  : [notification userInfo] ? [notification userInfo] : [NSNull null],
<                               @"event" : @(didRename)
<                           }
<             waitUntilDone:YES];
< //     [self callback:[notification userInfo] withEvent:didRename];
---
>     [self callback:[notification userInfo] withEvent:didRename];
165c125
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
187c147
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
194c154
<     watcher->fn = [skin luaRef:LST_getRefTable(skin, USERDATA_TAG, refTable)];
---
>     watcher->fn = [skin luaRef:refTable];
196c156
<     watcher->obj = (__bridge_retained void*) [[LST_VolumeWatcher alloc] initWithObject:watcher];
---
>     watcher->obj = (__bridge_retained void*) [[VolumeWatcher alloc] initWithObject:watcher];
204c164
< static void register_observer(LST_VolumeWatcher* observer) {
---
> static void register_observer(VolumeWatcher* observer) {
227c187
< static void unregister_observer(LST_VolumeWatcher* observer) {
---
> static void unregister_observer(VolumeWatcher* observer) {
245c205
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
255c215
<     register_observer((__bridge LST_VolumeWatcher*)watcher->obj);
---
>     register_observer((__bridge VolumeWatcher*)watcher->obj);
269c229
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
285c245
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
---
>     LuaSkin *skin = [LuaSkin shared];
291c251
<     watcher->fn = [skin luaUnref:LST_getRefTable(skin, USERDATA_TAG, refTable) ref:watcher->fn];
---
>     watcher->fn = [skin luaUnref:refTable ref:watcher->fn];
293c253
<     LST_VolumeWatcher* object = (__bridge_transfer LST_VolumeWatcher*)watcher->obj;
---
>     VolumeWatcher* object = (__bridge_transfer VolumeWatcher*)watcher->obj;
345,351c305,306
<     LuaSkin *skin = LST_getLuaSkin(); //[LuaSkin shared] ;
< 
<     LST_setRefTable(skin, USERDATA_TAG, refTable,
<         [skin registerLibraryWithObject:USERDATA_TAG
<                               functions:appLib
<                           metaFunctions:metaGcLib
<                         objectFunctions:metaLib]) ;
---
>     LuaSkin *skin = [LuaSkin shared];
>     refTable = [skin registerLibraryWithObject:USERDATA_TAG functions:appLib metaFunctions:metaGcLib objectFunctions:metaLib];
357,358d311
< 
< 
